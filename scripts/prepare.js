import { promises as fs } from "fs";
import * as prettier from "prettier";

(async () => {
	const exportsDir = "./exports/Line Icons";
	const libDir = "./src/lib/line";
	const prettierOptions = {
		...(await prettier.resolveConfig("./prettierrc")),
		parser: "svelte",
	};
	const components = [];

	const dir = await fs.readdir(exportsDir);
	for (const fileName of dir) {
		const componentName = toPascalCase(fileName.split(".")[0]);
		console.log(`Preparing ${componentName}.svelte...`);

		const svg = (await fs.readFile(`${exportsDir}/${fileName}`)).toString();
		const markup = svg
			.replace('width="24"', "width={size}")
			.replace('height="24"', "height={size}")
			.replace("<svg", `<svg {...$$$restProps}`)
			.replaceAll('"#000"', "{color}")
			.replaceAll('stroke-width="2"', "stroke-width={strokeWidth}");
		const data = `
		<script>
			/** @type {number} */
			export let size = 24;
			/** @type {string} */
			export let color = "currentColor";
			/** @type {number} */
			export let strokeWidth = 2;
		</script>

		${markup}
		`;
		const formatted = await prettier.format(data, prettierOptions);
		await fs.writeFile(`${libDir}/${componentName}.svelte`, formatted);
		components.push(componentName);
	}

	console.log(`Updating exports...`);
	const exportsData = [
		"// This file was autogenerated, please do not edit.",
		" ",
		...components.map(
			(x) => `export { default as ${x} } from "./${x}.svelte";`,
		),
	].join("\n");
	const formattedExports = await prettier.format(exportsData, {
		...prettierOptions,
		parser: "typescript",
	});
	await fs.writeFile(`${libDir}/index.js`, formattedExports);
	console.log("Done!");
})();

const toPascalCase = (str) =>
	str.replace(/(^\w|-\w)/g, (x) => x.replace(/-/, "").toUpperCase());
